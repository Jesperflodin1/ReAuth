buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

def releaseVersion   = "0"
def majorVersion     = "0"
def minorVersion     = "1"
def patchVersion     = "0"
def packageVersion   = releaseVersion+"."+majorVersion+"."+minorVersion+"."+patchVersion
def mcVersion        = "1.12.1"
def forgeVersion     = "14.22.1.2478"
def acceptedVersions = "[1.12, 1.12.2]"
def modId            = "reauthjf"
def modName          = "ReAuth-JF"

version = mcVersion+"-"+packageVersion
group = "fi.flodin" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = modId

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = mcVersion+"-"+forgeVersion
    if (file('../run').exists()) {
        runDir = "../run"
    }
    else{
        runDir = "run"
    }

    mappings = "snapshot_20171209"
    
    replace '@packageVersion@': packageVersion, '@mcVersion@': mcVersion, '@acceptedVersions@': acceptedVersions, '@ModName@': modName, '@ModId@': modId, '@certSHA1@': project.signSHA1, '@GroupId@': group
}

jar {
    manifest {
        attributes("Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}")
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': packageVersion, 'mcversion': mcVersion, 'modid': modId, 'modname': modName
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: Exec, dependsOn: reobfJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    executable = "jarsigner"
    args(["-signedJar", jar.archivePath, jar.archivePath, project.keyStoreAlias,
          "-tsa", project.tsa,
          "-keystore", project.keyStore,
          "-storepass", project.keyStorePass,
          "-keypass", project.keyStoreKeyPass])
}
build.dependsOn signJar
runClient.dependsOn signJar